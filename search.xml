<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第三章 结构化方法</title>
      <link href="/2020/06/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%B9%E6%B3%95/"/>
      <url>/2020/06/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-掌握结构化分析方法"><a href="#1-掌握结构化分析方法" class="headerlink" title="1.掌握结构化分析方法"></a>1.掌握结构化分析方法</h2><p>需求分析中的基本术语</p><ul><li>1.数据：客观事物的一种表示</li><li>2.信息：具有特定<strong>语义</strong>的数据</li><li>3.数据是信息的载体</li><li>4.数据流：数据的流动</li><li>5.加工：数据变化单元</li><li>6.数据存储</li></ul><h3 id="1-DFD"><a href="#1-DFD" class="headerlink" title="1.DFD"></a>1.DFD</h3><p> Data Flow Diagram，中文名数据流图或数据流程图，一种表示数据<strong>变换</strong>的图形化工具。</p><ul><li>DFD元素<ul><li>数据源/数据潭</li><li>数据流</li><li>数据加工</li><li>数据存储</li></ul></li></ul><ul><li>图形符号表示方法</li></ul><p><img src="/images/pasted-13.png" srcset="/img/loading.gif" alt="upload successful"></p><blockquote><p>画图原则：自顶向下，逐步求精</p></blockquote><h3 id="2-数据字典"><a href="#2-数据字典" class="headerlink" title="2.数据字典"></a>2.数据字典</h3><p>定义数据流程图中所有数据流和数据存储的数据结构。</p><ul><li>顺序结构： +</li><li>选择结构： |</li><li>重复结构：{ }</li><li>子界： m..n</li></ul><h3 id="3-决策树、决策表"><a href="#3-决策树、决策表" class="headerlink" title="3.决策树、决策表"></a>3.决策树、决策表</h3><p><img src="/images/pasted-16.png" srcset="/img/loading.gif" alt="upload successful"></p><p><img src="/images/pasted-14.png" srcset="/img/loading.gif" alt="upload successful"></p><p><img src="/images/pasted-15.png" srcset="/img/loading.gif" alt="upload successful"></p><h2 id="掌握结构化设计方法"><a href="#掌握结构化设计方法" class="headerlink" title="掌握结构化设计方法"></a>掌握结构化设计方法</h2><h3 id="结构化设计的任务"><a href="#结构化设计的任务" class="headerlink" title="结构化设计的任务"></a>结构化设计的任务</h3><ul><li>1.定义满足需求所需要的结构</li><li>2.确定“怎么做”的问题</li><li>3.划分为：总体设计、详细设计</li></ul><h4 id="总体设计：以系统为对象"><a href="#总体设计：以系统为对象" class="headerlink" title="总体设计：以系统为对象"></a>总体设计：以系统为对象</h4><ul><li>1.总体设计的任务：把系统的<strong>功能需求</strong>分配到一个特定的软件系统结构中</li><li>2.引入了两个概念<ul><li>模块：软件中具有特定标识的<strong>独立</strong>成分</li><li>模块调用： 模块之间的一种使用关系</li></ul></li></ul><h5 id="1-总体设计的步骤"><a href="#1-总体设计的步骤" class="headerlink" title="1.总体设计的步骤"></a>1.总体设计的步骤</h5><p>将DFD图映射为设计层面的模块及模块调用</p><ul><li>1.将DFD图转换为初始的模块结构图</li><li>2.基于“高内聚，低耦合”的软件设计原理，用过模块化，将初始的模块结构图转化为最终的模块结构图</li></ul><h5 id="2-两种映射方法"><a href="#2-两种映射方法" class="headerlink" title="2.两种映射方法"></a>2.两种映射方法</h5><ul><li>1.变换设计</li></ul><p><img src="/images/pasted-17.png" srcset="/img/loading.gif" alt="upload successful"></p><p><img src="/images/pasted-18.png" srcset="/img/loading.gif" alt="upload successful"><br>基于<strong>变换</strong>的数据流图是一个线性的顺序结构，由<strong>输入、输出和变换中心</strong>三部分组成。</p><ul><li>2.事务设计<br>基于<strong>事务</strong>的数据流程图中有一个事务处理中心，它将输入分为许多互相平行的加工路径，然后根据输入的属性，选择某一条加工路径。</li></ul><p><img src="/images/pasted-19.png" srcset="/img/loading.gif" alt="upload successful"></p><h4 id="详细设计：以模块为对象"><a href="#详细设计：以模块为对象" class="headerlink" title="详细设计：以模块为对象"></a>详细设计：以模块为对象</h4><h3 id="1-控制结构图、PAD图、N-S图等"><a href="#1-控制结构图、PAD图、N-S图等" class="headerlink" title="1.控制结构图、PAD图、N-S图等"></a>1.控制结构图、PAD图、N-S图等</h3>]]></content>
      
      
      <categories>
          
          <category> 自考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker的常用命令</title>
      <link href="/2020/06/10/docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/06/10/docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Docker容器信息"><a href="#Docker容器信息" class="headerlink" title="Docker容器信息"></a>Docker容器信息</h2><div class="hljs"><pre><code class="hljs jboss-cli">docker <span class="hljs-keyword">version</span> <span class="hljs-comment"># docker版本  </span>docker info <span class="hljs-comment"># docker配置信息   </span>docker -- <span class="hljs-keyword">help</span> <span class="hljs-comment"># docker帮助命令</span></code></pre></div><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="镜像查看"><a href="#镜像查看" class="headerlink" title="镜像查看"></a>镜像查看</h3><div class="hljs"><pre><code class="hljs haml">docker images # 列出本地主机上的镜像    -<span class="ruby">a  <span class="hljs-comment"># 列出本所有的镜像（含中间映像层）  </span></span> -<span class="ruby">q  <span class="hljs-comment"># 只显示镜像ID</span></span> -<span class="ruby">qa  <span class="hljs-comment"># 含中间映像层ID   </span></span> -<span class="ruby">-digests <span class="hljs-comment"># 显示镜像摘要信息(DIGEST列)  </span></span> -<span class="ruby">-no-trunc <span class="hljs-comment"># 显示镜像完整信息  </span></span>docker history -H redis # 显示指定镜像的历史创建；  -<span class="ruby">H <span class="hljs-comment"># 镜像大小和日期，默认为true；    </span></span>-<span class="ruby">-no-trunc  <span class="hljs-comment"># 显示完整的提交记录；  </span></span>-<span class="ruby">q  <span class="hljs-comment"># 仅列出提交记录ID</span></span></code></pre></div><h3 id="镜像搜索"><a href="#镜像搜索" class="headerlink" title="镜像搜索"></a>镜像搜索</h3><div class="hljs"><pre><code class="hljs dsconfig"><span class="hljs-string">docker </span><span class="hljs-string">search </span>镜像名 <span class="hljs-comment"># 列出远程仓库上的镜像  </span><span class="hljs-string">docker </span><span class="hljs-string">search </span><span class="hljs-built_in">--filter=stars=600</span> <span class="hljs-string">mysql </span><span class="hljs-comment"># 只显示 starts&gt;=600 的镜像 </span><span class="hljs-string">docker </span><span class="hljs-string">search </span><span class="hljs-built_in">--no-trunc</span> <span class="hljs-string">mysql </span><span class="hljs-comment"># 显示镜像完整 DESCRIPTION 描述 </span><span class="hljs-string">docker </span><span class="hljs-string">search </span> <span class="hljs-built_in">--automated</span> <span class="hljs-string">mysql </span><span class="hljs-comment"># 只列出 AUTOMATED=OK 的镜像</span></code></pre></div><h3 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h3><div class="hljs"><pre><code class="hljs livecodeserver">docker pull 镜像名 <span class="hljs-comment"># 下载远程仓库上的镜像到本地(默认最新)  </span>docker pull -<span class="hljs-keyword">a</span> redis <span class="hljs-comment"># 下载仓库所有Redis镜像  </span>docker pull bitnami/redis <span class="hljs-comment"># 下载私人仓库镜像</span></code></pre></div><h3 id="镜像删除"><a href="#镜像删除" class="headerlink" title="镜像删除"></a>镜像删除</h3><div class="hljs"><pre><code class="hljs powershell">docker rmi 镜像名 <span class="hljs-comment"># 单个镜像删除    </span>docker rmi <span class="hljs-operator">-f</span> 镜像名 <span class="hljs-comment"># 强制删除(针对基于镜像有运行的容器进程)   </span>docker rmi <span class="hljs-operator">-f</span> redis tomcat nginx <span class="hljs-comment"># 多个镜像删除，不同镜像间以空格间隔  </span>docker rmi <span class="hljs-operator">-f</span> <span class="hljs-variable">$</span>(docker images <span class="hljs-literal">-q</span>) <span class="hljs-comment"># 删除本地全部镜像</span></code></pre></div><h3 id="镜像构建"><a href="#镜像构建" class="headerlink" title="镜像构建"></a>镜像构建</h3><div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/docker/dockerfile</span>vim mycentos  <span class="hljs-comment"># 编写dockerfile</span>docker build -f <span class="hljs-string">/docker/dockerfile/mycentos</span> -t mycentos<span class="hljs-function">:1.1</span> <span class="hljs-comment"># 构建docker镜像</span></code></pre></div><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><div class="hljs"><pre><code class="hljs markdown">docker run [<span class="hljs-string">OPTIONS</span>] IMAGE [<span class="hljs-string">COMMAND</span>][<span class="hljs-symbol">ARG...</span>] # 新建并启动容器  docker run -it --name mycentos      -i # 以交互模式运行容器；   -t # 为容器重新分配一个伪输入终端；   --name # 为容器指定一个名称</code></pre></div><div class="hljs"><pre><code class="hljs awk">docker attach 容器id <span class="hljs-comment"># 进入正在运行的容器并以命令行进行交互</span><span class="hljs-keyword">exit</span> <span class="hljs-comment"># 停止容器退出 </span>ctrl+P+Q <span class="hljs-comment"># 不停止容器退出  </span>docker exec -t 容器id <span class="hljs-comment"># 不进入正在运行的容器直接在终端以命令行进行交互</span></code></pre></div><div class="hljs"><pre><code class="hljs haml">docker ps [OPTIONS] # 列出所有**正在运行**的容器   -<span class="ruby">a  <span class="hljs-comment"># 列出所有正在运行的/历史运行的容器  </span></span> -<span class="ruby">l <span class="hljs-comment"># 列出上一个运行的容器  </span></span> -<span class="ruby">n <span class="hljs-number">2</span> <span class="hljs-comment"># 列出上2个运行的容器  </span></span> -<span class="ruby">q  <span class="hljs-comment"># 静默模式，只显示容器id  </span></span> -<span class="ruby">s <span class="hljs-comment"># 显示运行容器总文件大小  </span></span> -<span class="ruby">-no-trunc <span class="hljs-comment"># 不截断输出</span></span></code></pre></div><div class="hljs"><pre><code class="hljs sql">docker <span class="hljs-keyword">start</span> 容器名/<span class="hljs-keyword">id</span> <span class="hljs-comment"># 启动容器  </span>docker restart 容器名/容器<span class="hljs-keyword">id</span> <span class="hljs-comment"># 重启容器    </span>docker <span class="hljs-keyword">stop</span> 容器名/容器<span class="hljs-keyword">id</span> <span class="hljs-comment"># 停止容器    </span>docker <span class="hljs-keyword">kill</span> 容器名/容器<span class="hljs-keyword">id</span> <span class="hljs-comment"># 强制停止容器   </span>docker rm 容器名/容器<span class="hljs-keyword">id</span> <span class="hljs-comment"># 删除已停止容器  </span>docker rm -f 容器名/容器<span class="hljs-keyword">id</span> <span class="hljs-comment"># 强制停止并删除容器  </span>docker rm -v 容器名/容器<span class="hljs-keyword">id</span> <span class="hljs-comment"># 删除容器，并删除容器挂载的数据卷</span><span class="hljs-comment"># 一次删除多个容器   </span>docker rm -f $&#123;docker ps -a -q&#125;       docker ps -a -q | xargs docker rm</code></pre></div><h3 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h3><div class="hljs"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -d 容器 <span class="hljs-comment"># 一次删除多个容器启动守护式容器   </span>docker logs -f -t <span class="hljs-comment">--tail 5 容器id # 一次删除多个容器查看容器日志 </span> -t <span class="hljs-comment"># 一次删除多个容器是加入时间戳  </span> -f <span class="hljs-comment"># 一次删除多个容器跟随最新的日志打印  </span> <span class="hljs-comment">--tail 5 # 一次删除多个容器显示最后5条  </span> docker top 容器<span class="hljs-built_in">id</span>  <span class="hljs-comment"># 一次删除多个容器查看容器内运行的进程  </span>docker inspect 容器<span class="hljs-built_in">id</span> <span class="hljs-comment"># 一次删除多个容器查看容器内部细节    </span>docker inspect <span class="hljs-comment">--format='&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;' redis # 一次删除多个容器获取正在运行的容器redis的 IP  </span>docker cp 容器<span class="hljs-built_in">id</span>:/[container_path]  /[local_path] <span class="hljs-comment"># 一次删除多个容器从容器内拷贝文件到主机上    </span>docker cp [local_path] 容器<span class="hljs-built_in">id</span>:/[container_path]/ <span class="hljs-comment"># 一次删除多个容器将主机文件copy至容器    </span>docker cp [local_path] 容器<span class="hljs-built_in">id</span>:/[container_path] <span class="hljs-comment"># 一次删除多个容器将主机文件copy至容器，目录重命名为[container_path]（注意与非重命名copy的区别）</span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 需求获取</title>
      <link href="/2020/06/08/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E9%9C%80%E6%B1%82%E8%8E%B7%E5%8F%96/"/>
      <url>/2020/06/08/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E9%9C%80%E6%B1%82%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="第二章-需求获取"><a href="#第二章-需求获取" class="headerlink" title="第二章 需求获取"></a>第二章 需求获取</h2><blockquote><p>“明白自己在做什么” ——温伯格《探索需求》</p></blockquote><h3 id="什么是需求"><a href="#什么是需求" class="headerlink" title="什么是需求"></a>什么是需求</h3><p>一个需求是有关一个“要予构造”的陈述，描述了待开发产品/系统（或项）功能上的能力、性能参数或其他性质。</p><h3 id="需求的基本性质"><a href="#需求的基本性质" class="headerlink" title="需求的基本性质"></a>需求的基本性质</h3><ul><li>必要的</li><li>无歧义的</li><li>可测的</li><li>可跟踪的</li><li>可测量的</li></ul><h3 id="需求的分类"><a href="#需求的分类" class="headerlink" title="需求的分类"></a>需求的分类</h3><ul><li>功能分类：整个需求的主体<ul><li>功能</li></ul></li><li>非功能分类<ul><li>性能</li><li>外部接口</li><li>设计约束</li><li>质量属性</li></ul></li></ul><h3 id="需求发现技术"><a href="#需求发现技术" class="headerlink" title="需求发现技术"></a>需求发现技术</h3><ul><li>自悟 </li><li>交谈</li><li>观察</li><li>小组会</li><li>提炼</li></ul><h3 id="需求规约（SRS）"><a href="#需求规约（SRS）" class="headerlink" title="需求规约（SRS）"></a>需求规约（SRS）</h3><p>是一个软件/产品/系统所有需求陈述的正式文档，它表达了一个软件/产品/系统的概念模型</p><h3 id="需求规约的基本性质"><a href="#需求规约的基本性质" class="headerlink" title="需求规约的基本性质"></a>需求规约的基本性质</h3><ul><li>1 重要性和稳定性程度：对需求经行分级</li><li>2 可修改的</li><li>3 完整的：没有被遗漏的需求</li><li>4 一致的：不存在互斥的需求</li></ul><h3 id="需求规约的格式"><a href="#需求规约的格式" class="headerlink" title="需求规约的格式"></a>需求规约的格式</h3><p>IEEE标准830-1998（IEEE 1998）  </p><ul><li>1.引言：<br>目的、范围、定义、缩略语、参考文献、概述</li><li>2.总体描述<br>产品描述、产品功能、用户特性、约束、假设</li><li>3.特定需求：是文档的技术核心</li><li>4.附录</li><li>5.索引</li></ul><h3 id="需求规约的表达"><a href="#需求规约的表达" class="headerlink" title="需求规约的表达"></a>需求规约的表达</h3><ul><li>非形式化的需求规约</li><li>半形式化的需求规约</li><li>形式化的需求规约</li></ul><h3 id="需求规约的作用"><a href="#需求规约的作用" class="headerlink" title="需求规约的作用"></a>需求规约的作用</h3><ul><li>1.是软件开发组织和用户之间一份事实上的技术合同书，是产品功能及其环境的体现</li><li>2.是一个管理的控制点</li><li>3.对于产品/系统的设计，需求规约是一个正式的、受控的起始点</li><li>4.是创建产品<strong>验收测试计划</strong>和用户指南的基础</li></ul><h3 id="简答-什么是需求规约-需求规约的作用"><a href="#简答-什么是需求规约-需求规约的作用" class="headerlink" title="简答:什么是需求规约,需求规约的作用"></a>简答:什么是需求规约,需求规约的作用</h3>]]></content>
      
      
      <categories>
          
          <category> 自考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 绪论</title>
      <link href="/2020/06/08/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%BB%AA%E8%AE%BA/"/>
      <url>/2020/06/08/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%BB%AA%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2><h3 id="软件工程提出的背景"><a href="#软件工程提出的背景" class="headerlink" title="软件工程提出的背景"></a>软件工程提出的背景</h3><p>软件生产率、软件质量满足不了需求，软件开发成本高</p><h3 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h3><p>应用计算机科学理论和技术以及<strong>工程管理原则和方法</strong>，按<strong>预算</strong>和<strong>进度</strong>实现满足用户要求的软件产品的工程，或以此为研究对象的学科</p><h3 id="软件开发的本质"><a href="#软件开发的本质" class="headerlink" title="软件开发的本质"></a>软件开发的本质</h3><p>不同抽象层术语之间的<strong>映射</strong>，以及不同抽象层处理逻辑之间的<strong>映射</strong>。</p><h3 id="系统建模"><a href="#系统建模" class="headerlink" title="系统建模"></a>系统建模</h3><p>运用所掌握的知识通过抽象来给出系统的一个结构</p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>软件 = 程序 + 文档</p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>模型是一个抽象</p><h3 id="模型的类别"><a href="#模型的类别" class="headerlink" title="模型的类别"></a>模型的类别</h3><ul><li>概念模型：描述软件是什么</li><li>软件模型：实现概念模型的软件解决方案。包括<strong>设计模型、实现模型和部署模型</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 自考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国近现代史纲要</title>
      <link href="/2020/05/22/%E4%B8%AD%E5%9B%BD%E8%BF%91%E7%8E%B0%E4%BB%A3%E5%8F%B2%E7%BA%B2%E8%A6%81%E7%9B%AE%E5%BD%95/"/>
      <url>/2020/05/22/%E4%B8%AD%E5%9B%BD%E8%BF%91%E7%8E%B0%E4%BB%A3%E5%8F%B2%E7%BA%B2%E8%A6%81%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>纵贯线：中国历史、中国人民</p><ul><li>为什么选择马克思主义</li><li>为什么选择中国共产党</li><li>为什么选择社会主义</li><li>为什么选择改革开放</li></ul><p>五个阶级参与革命:</p><ul><li>农民阶级</li><li>开明士绅</li><li>民族资产阶级改良派</li><li>民族资产阶级革命派</li><li>无产阶级</li></ul><h2 id="第一章-反对外国侵略的斗争"><a href="#第一章-反对外国侵略的斗争" class="headerlink" title="第一章 反对外国侵略的斗争"></a><a href="/2020/06/08/中国近现代史纲要-第一章-反对外国侵略的斗争/">第一章 反对外国侵略的斗争</a></h2><ul><li>1.近代中国工人阶级的形成及其特点</li><li>2.近代中国社会两大主要矛盾及其关系</li></ul><h2 id="第二章-对国家出路的早期探索"><a href="#第二章-对国家出路的早期探索" class="headerlink" title="第二章 对国家出路的早期探索"></a><a href="/2020/06/08/中国近现代史纲要-第二章-对国家出路的早期探索/">第二章 对国家出路的早期探索</a></h2><ul><li>1.太平天国的历史意义</li><li>2.戊戌变法的意义及教训</li></ul><h2 id="第三章-辛亥革命"><a href="#第三章-辛亥革命" class="headerlink" title="第三章 辛亥革命"></a><a href="/2020/06/08/中国近现代史纲要-第三章-辛亥革命/">第三章 辛亥革命</a></h2><ul><li>1.资产阶级改良派及资产阶级革命派的论战及意义</li><li>2.辛亥革命胜利的历史意义及局限性、</li><li>3.资产阶级革命派为捍卫民主革命成果而反对北洋军阀进行了什么斗争</li></ul><h2 id="第四章-开天辟地的大事变"><a href="#第四章-开天辟地的大事变" class="headerlink" title="第四章 开天辟地的大事变"></a><a href="/2020/06/08/中国近现代史纲要-第四章-开天辟地的大事变/">第四章 开天辟地的大事变</a></h2><ul><li>1.新文化运动的主要内容及其意义</li><li>2.五四运动的特点和历史意义</li><li>3.中国共产党成立的历史意义和特点</li><li>4.中共二大制定的民主革命的纲领及意义</li><li>5.国民革命的历史意义</li></ul><h2 id="第五章-中国革命的新道路"><a href="#第五章-中国革命的新道路" class="headerlink" title="第五章 中国革命的新道路"></a><a href="/2020/06/08/中国近现代史纲要-第五章-中国革命的新道路/">第五章 中国革命的新道路</a></h2><ul><li>1.南昌起义的意义</li><li>2.中国红色政权存在的原因和条件</li><li>3.二十世纪二三十年代党内屡次出现左倾的原因</li><li>4.长征的胜利及意义</li></ul><h2 id="第六章-中华民族的抗日战争"><a href="#第六章-中华民族的抗日战争" class="headerlink" title="第六章 中华民族的抗日战争"></a><a href="/2020/06/08/中国近现代史纲要-第六章-中华民族的抗日战争/">第六章 中华民族的抗日战争</a></h2><ul><li>1.日本侵略给中华民族带来的深重灾难是什么</li><li>2.一二·九运动及其意义</li><li>3.瓦窑堡会议的内容及意义</li><li>4.毛主席《论持久战》的内容及意义</li><li>5.中国共产党关于巩固和扩大抗日民族统一战线的策略总方针</li><li>6.抗日战争胜利的原因和基本经验</li><li>7.中国人民抗日战争在世界反法西斯战争中的地位</li></ul><h2 id="第七章-为创建新中国为奋斗"><a href="#第七章-为创建新中国为奋斗" class="headerlink" title="第七章 为创建新中国为奋斗"></a><a href="#">第七章 为创建新中国为奋斗</a></h2><ul><li>1.抗日战争胜利后中国国内的三种建国方案和两种中国之命运的较量</li><li>2.中共七届二中全会的主要内容（“西柏坡会议”、“两个务必”）</li><li>3.毛主席在《论人民民主专政》阐明的中国共产党的建国主张</li><li>4.中国人民政治协商会议通过的共同纲领的主要内容</li><li>5.中国革命胜利的主要原因和基本经验</li><li>6.统一战线中两个联盟及巩固扩大统一战线的条件</li></ul><h2 id="第八章-社会主义基本制度的全面确立"><a href="#第八章-社会主义基本制度的全面确立" class="headerlink" title="第八章 社会主义基本制度的全面确立"></a><a href="#">第八章 社会主义基本制度的全面确立</a></h2><ul><li>1.中华人民共和国的成立开辟了中国历史的新纪元</li><li>2.建国初期国民经济迅速恢复的原因</li><li>3.党在过渡时期总路线的内容和特点</li><li>4.建国后对农业社会主义改造的基本原则和方针</li><li>5.建国以后对资本主义工商业社会主义改造的特点</li><li>6.我国社会主义改造基本完成的意义</li></ul><h2 id="第九章-社会主义建设在探索中曲折发展"><a href="#第九章-社会主义建设在探索中曲折发展" class="headerlink" title="第九章 社会主义建设在探索中曲折发展"></a><a href="#">第九章 社会主义建设在探索中曲折发展</a></h2><ul><li>1.《论十大关系》的主要内容和意义</li><li>2.中共八大提出的经济、政治以及执政党建设的指导方针</li><li>3.七千人大会的意义</li><li>4.毛泽东在探索社会主义道路中提出的文化建设的方针是什么</li></ul><h2 id="第十章-改革开放与现代化建设新时期"><a href="#第十章-改革开放与现代化建设新时期" class="headerlink" title="第十章 改革开放与现代化建设新时期"></a><a href="#">第十章 改革开放与现代化建设新时期</a></h2><ul><li>1.中国十一届三中全会的历史贡献（改革开放的开始）</li><li>2.邓小平在南方谈话的主要内容和意义</li><li>3.香港、澳门的回归及其重要意义</li></ul><h2 id="第十一章-中国特色社会主义进入新时代"><a href="#第十一章-中国特色社会主义进入新时代" class="headerlink" title="第十一章 中国特色社会主义进入新时代"></a><a href="#">第十一章 中国特色社会主义进入新时代</a></h2>]]></content>
      
      
      <categories>
          
          <category> 自考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中国近现代史纲要 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年我们一起听过的杰伦</title>
      <link href="/2020/04/09/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E5%90%AC%E8%BF%87%E7%9A%84%E6%9D%B0%E4%BC%A6/"/>
      <url>/2020/04/09/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E5%90%AC%E8%BF%87%E7%9A%84%E6%9D%B0%E4%BC%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>down了杰伦的歌下来，上传到网易云盘播放了<br>额，个人听听不知道会不会被告盗版。。。<br>用aplayer.js的meting</p><h2 id="1-下载插件"><a href="#1-下载插件" class="headerlink" title="1.下载插件"></a>1.下载插件</h2><p>若主题内置可直接跳至下一步</p><div class="hljs"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-tag-aplayer</code></pre></div><h2 id="2-config-yml添加配置"><a href="#2-config-yml添加配置" class="headerlink" title="2._config.yml添加配置"></a>2._config.yml添加配置</h2><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">aplayer:</span>  <span class="hljs-attr">meting:</span> <span class="hljs-literal">true</span></code></pre></div><h2 id="3-md语法"><a href="#3-md语法" class="headerlink" title="3.md语法"></a>3.md语法</h2><p>音乐平台: netease, tencent, kugou, xiami, baidu</p><div class="hljs"><pre><code class="hljs clojure">&#123;% meting <span class="hljs-string">"id"</span> <span class="hljs-string">"netease"</span> <span class="hljs-string">"playlist"</span> %&#125;</code></pre></div><p><strong>但是云盘歌单老是报错。。。可能网易云盘用了不可描述的操作（因为好多云盘的歌<del>没版权的歌</del>还能看到评论），</strong></p><p>没办法，只能用网易云的网易云的iframe,但是吧emm…样式不太支持手机端，而且手机浏览器不能播放不能滑动。 </p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"no"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">marginwidth</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">marginheight</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">350</span> <span class="hljs-attr">height</span>=<span class="hljs-string">300</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//music.163.com/outchain/player?type=0&amp;id=XXXXXXX&amp;auto=1&amp;height=430"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div><div>    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=350 height=300 src="//music.163.com/outchain/player?type=0&id=4945505356&auto=1&height=430">    </iframe></div><h2 id="4-meting的demo效果"><a href="#4-meting的demo效果" class="headerlink" title="4.meting的demo效果"></a>4.meting的demo效果</h2><p>放个meting的demo,QQ音乐的歌单，不过好多收费的还是没法放，聊胜于无哦</p><blockquote><p>说明meting是能用的（微信内置浏览器竟然支持，意外之喜~实测meting也不支持很多手机浏览器，不过Chrome还是支持的，不过用的人很少就是了）。</p></blockquote>    <div id="aplayer-twhYPGSt" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="3806287274" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div>  <p>嘻嘻，又成功水了一贴（<em>^_^</em>）!</p><blockquote><p>青春有很多种，其中一种叫做周杰伦~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Jay Chou </tag>
            
            <tag> meting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>睡前日记</title>
      <link href="/2020/02/25/%E7%9D%A1%E5%89%8D%E6%97%A5%E8%AE%B0/"/>
      <url>/2020/02/25/%E7%9D%A1%E5%89%8D%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看加密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="还没写完，需要密码才能看" /><label>还没写完，需要密码才能看</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="8962b21fe28ed13a51825c81b0f9b896c0f835a77d2b4e555c9dc1814e588132">e02d12fb45a752628f72eca06f2445db6d333cd033e43d32f92279e33a9e959d33ad09c5c4b342405a66ef31e16efa17017b7b341936740be2859e455dcf23977358440b106330025c0cb9c3de4cce1df0bcfa6142a137c6df37e38943c055c91dc613a307af74b773f6e4caffd75eef1fe9737d5ecdc7c6df26ebc43fab6c0261dddb088fc9ee4203b2ad73e1d6ca179ca76b3a39250654b34f7b97800a392e23350ec3b833445996aec49c42849974e08897090202c0986fac01358897088bb84f4b12fb9f06e580b40504afb99c43d78acfb255b4d2d4d9f4f872aa7be4f8a3d08f204381f44ed9bf03617ef62f680c6c3b11e50319e460e3827895ddd02dffb6f6d09e5427992d352be402fe6d8e5882963c54912e4b7c50e051f686ca2586021384bc37b4fb89a0fc50a880eabf6adebe4c2aafbc2befb4a33b0fd84ccfefb6a542b5c5e5ba51c9bc357e42de3532bde81c3acf19d530500dc3b7012ce749b725dea3011f3cf2fb6d00f1bc37e157694e366c00cb701e10333ad34013a01ee82ced43ed1810524d9cf2be844c8d658b8d4cac2acee9c849770240964a074e5a7366dba9393089437a87817e0ec2b2c7f4218226a9b02968219d4d2b3535affacdc661743930c3d84f29bf1114a7412e6b5bd0955d2ecee8e5a8b44de3697597478d68451e52d224122b91e28ed465ee84d7f7de470899cdea736702c32b7d7b43b854f4e59e1b7326cc688293e13d65ed11d2ee10a3726fbd51a566abc31047d469c81835960e4ed13b9eb8f9e89d1ba5b03f74a7957f00d31b7d7c8fd5ed1a84390ff3e738069da6d0eab5f674c25832e73b3d526f444166976fd92d6d07b0d5f3e7612428dac683be925a4dd39102eceaa3a48253d2e44e8f487f16f67e5e8f404447af4c26716bc98f118f7607c285cdf4ca591f5e16b9c2a644da2b7122141fda4d6b0fa269de0357ddcf79</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> lock </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker中nginx开启https</title>
      <link href="/2019/09/18/Docker%E4%B8%ADnginx%E5%BC%80%E5%90%AFhttps/"/>
      <url>/2019/09/18/Docker%E4%B8%ADnginx%E5%BC%80%E5%90%AFhttps/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>打开网页老是显示不安全，强迫症的我最终决定开启https.<br>由于使用的是阿里云，所以直接在阿里云上申请了ssl，比较简单这里就不多赘述。  </p><h5 id="1-申请ssl备案通过后"><a href="#1-申请ssl备案通过后" class="headerlink" title="1.申请ssl备案通过后"></a>1.申请ssl备案通过后</h5><p><img src="/images/pasted-1.png" srcset="/img/loading.gif" alt="upload successful"><br>点击下载，选择nginx版本</p><p><img src="/images/pasted-2.png" srcset="/img/loading.gif" alt="upload successful"></p><h5 id="2-nginx配置"><a href="#2-nginx配置" class="headerlink" title="2.nginx配置"></a>2.nginx配置</h5><p>首先将下载的pem文件和key文件上传至服务器nginx文件夹下（方便自己记忆的文件夹/映射文件夹）<br>然后打开nginx的配置文件<br>新增如下配置，开启http请求自动重定向至https</p><div class="hljs"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;        <span class="hljs-attribute">server_name</span>  XXXXX;        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span>;   <span class="hljs-comment">#将所有http请求通过rewrite重定向到https。</span>    &#125;</code></pre></div><p>然后添加</p><div class="hljs"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;       <span class="hljs-attribute">listen</span><span class="hljs-number">443</span> ssl;       <span class="hljs-attribute">server_name</span>  XXXXX;   <span class="hljs-comment">#ssl on</span>      <span class="hljs-attribute">ssl_certificate</span> /etc/ssl/XXXXXX.pem;   <span class="hljs-comment">#将domain name.pem替换成您证书的文件名。</span>   <span class="hljs-attribute">ssl_certificate_key</span> /etc/ssl/XXXXXX.key;   <span class="hljs-comment">#将domain name.key替换成您证书的密钥文件名。</span>   <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;   <span class="hljs-attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  <span class="hljs-comment">#使用此加密套件。</span>   <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;   <span class="hljs-comment">#使用该协议进行配置。</span>   <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;</code></pre></div><p>根据不同网站对不同浏览器的支持，<code>ssl_ciphers</code>与<code>ssl_protocols</code>可以斟酌配置  </p><hr><p><u><a href="#1">SSL／TLS 系列中有<strong>五种</strong>协议</a></u><sup>1</sup>：SSL v2，SSL v3，TLS v1.0，TLS v1.1和TLS v1.2：  </p><ul><li>SSL v2 是不安全的，不能使用。此协议版本非常糟糕，即使它们位于完全不同的服务器（DROWN 攻击）上也可以用来攻击具有相同名称的RSA 密钥和站点。</li><li>当与 HTTP（POODLE 攻击）一起使用时，SSL v3 是不安全的，当与其他协议一起使用时，SSL v3 是弱的。它也是过时的，不应该被使用。</li><li>TLS v1.0 也是不应该使用的传统协议，但在实践中通常仍然是必需的。其主要弱点（BEAST）在现代浏览器中得到缓解，但其他问题仍然存在。</li><li>TLS v1.1 和 v1.2 都没有已知的安全问题，只有 v1.2 提供了现代的加密算法。</li></ul><hr><p>根据nginx版本不同,<br>*<em>nginx1.15.0更新日志<br>Changes with nginx 1.15.0                                        05 Jun 2018<br>    *) Change: the “ssl” directive is deprecated; the “ssl” parameter of the<br>       “listen” directive should be used instead.  *</em><br>so，nginx1.15.0前ssl开启使用 </p><div class="hljs"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">listen</span></span>443<span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span></code></pre></div><p>1.15.0之后使用</p><div class="hljs"><pre><code class="hljs lsl"><span class="hljs-section">listen</span> <span class="hljs-number">443</span> ssl</code></pre></div><p>否则会报<code>the &quot;ssl&quot; directive is deprecated, use the &quot;listen ... ssl&quot; directive instead in /etc/nginx/nginx.conf</code>错误<br>如果是没有使用docker直接使用的nginx到这一步就可以重启nginx然后通过https访问了。</p><h5 id="3-docker映射修改"><a href="#3-docker映射修改" class="headerlink" title="3.docker映射修改"></a>3.docker映射修改</h5><p>由于我是用的是docker的nginx容器，所以需要修改一下映射命令（之前的文章有写）<br>加上新的ssl文件夹和443端口映射（443端口一定要加上，否则还是访问不了）</p><div class="hljs"><pre><code class="hljs groovy">docker run --name nginx80 -d -p <span class="hljs-number">443</span>:<span class="hljs-number">443</span> -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -v <span class="hljs-regexp">/data/</span>nginx<span class="hljs-regexp">/html:/</span>etc<span class="hljs-regexp">/nginx/</span>html -v <span class="hljs-regexp">/data/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.<span class="hljs-string">conf:</span><span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/nginx.conf  -v /</span>data<span class="hljs-regexp">/nginx/</span><span class="hljs-string">logs:</span><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx -v /</span>data<span class="hljs-regexp">/nginx/</span>conf.<span class="hljs-string">d:</span><span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d -v /</span>data<span class="hljs-regexp">/nginx/</span><span class="hljs-string">ssl:</span><span class="hljs-regexp">/etc/</span>nginx/ssl -d <span class="hljs-string">nginx:</span>latest</code></pre></div><p>然后就可以愉快的使用https访问自己的网站啦！</p><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><span id="1">[1]<a href="https://blog.myssl.com/ssl-and-tls-deployment-best-practices/" target="_blank" rel="noopener" _blank>HTTPS 安全最佳实践（一）之SSL/TLS部署</a></span>]]></content>
      
      
      <categories>
          
          <category> HTTPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nginx </tag>
            
            <tag> HTTPS </tag>
            
            <tag> SSL／TLS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx实现负载均衡的几种方法</title>
      <link href="/2019/09/15/Nginx%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2019/09/15/Nginx%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="一、Nginx负载均衡的集中方式介绍"><a href="#一、Nginx负载均衡的集中方式介绍" class="headerlink" title="一、Nginx负载均衡的集中方式介绍"></a><strong>一、Nginx负载均衡的集中方式介绍</strong></h3><h4 id="1-1-轮询"><a href="#1-1-轮询" class="headerlink" title="1.1 轮询"></a><strong>1.1 轮询</strong></h4><p>轮询方式是Nginx负载默认的方式，顾名思义，所有请求都按照时间顺序分配到不同的服务上，如果服务Down掉，可以自动剔除，如下配置后轮训1001服务和1002服务。</p><div class="hljs"><pre><code class="hljs routeros">upstream  localhost-server &#123;      <span class="hljs-built_in"> server </span>   localhost:1001;      <span class="hljs-built_in"> server </span>   localhost:1002;&#125;</code></pre></div><h4 id="1-2-权重"><a href="#1-2-权重" class="headerlink" title="1.2 权重"></a><strong>1.2 权重</strong></h4><p>指定每个服务的权重比例，weight和访问比率成正比，通常用于后端服务机器性能不统一，将性能好的分配权重高来发挥服务器最大性能，如下配置后1002服务的访问比率会是1001服务的二倍。</p><div class="hljs"><pre><code class="hljs routeros">upstream  localhost-server &#123;      <span class="hljs-built_in"> server </span>   localhost:1001 <span class="hljs-attribute">weight</span>=1;      <span class="hljs-built_in"> server </span>   localhost:1002 <span class="hljs-attribute">weight</span>=2;&#125;</code></pre></div><h4 id="1-3-iphash"><a href="#1-3-iphash" class="headerlink" title="1.3 iphash"></a><strong>1.3 iphash</strong></h4><p>每个请求都根据访问ip的hash结果分配，经过这样的处理，每个访客固定访问一个后端服务，如下配置（ip_hash可以和weight配合使用）。</p><div class="hljs"><pre><code class="hljs routeros">upstream  localhost-server &#123;       ip_hash;       <span class="hljs-built_in"> server </span>   localhost:1001 <span class="hljs-attribute">weight</span>=1;      <span class="hljs-built_in"> server </span>   localhost:1002 <span class="hljs-attribute">weight</span>=2;&#125;</code></pre></div><h4 id="1-4-最少连接"><a href="#1-4-最少连接" class="headerlink" title="1.4 最少连接"></a><strong>1.4 最少连接</strong></h4><p>将请求分配到连接数最少的服务上。</p><div class="hljs"><pre><code class="hljs routeros">upstream  localhost-server &#123;       least_conn;      <span class="hljs-built_in"> server </span>   localhost:1001 <span class="hljs-attribute">weight</span>=1;      <span class="hljs-built_in"> server </span>   localhost:1002 <span class="hljs-attribute">weight</span>=2;&#125;</code></pre></div><h4 id="1-5-fair"><a href="#1-5-fair" class="headerlink" title="1.5 fair"></a><strong>1.5 fair</strong></h4><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><div class="hljs"><pre><code class="hljs routeros">upstream  localhost-server &#123;      <span class="hljs-built_in"> server </span>   localhost:1001 <span class="hljs-attribute">weight</span>=1;      <span class="hljs-built_in"> server </span>   localhost:1002 <span class="hljs-attribute">weight</span>=2;       fair;  &#125;</code></pre></div><h3 id="二、Nginx配置"><a href="#二、Nginx配置" class="headerlink" title="二、Nginx配置"></a><strong>二、Nginx配置</strong></h3><p>以轮训为例，nginx.conf完整代码。</p><div class="hljs"><pre><code class="hljs nginx"><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<span class="hljs-section">events</span> &#123;    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;&#125;<span class="hljs-section">http</span> &#123;   <span class="hljs-attribute">upstream</span>  localhost-server &#123;       <span class="hljs-attribute">server</span>    localhost:<span class="hljs-number">1001</span>;       <span class="hljs-attribute">server</span>    localhost:<span class="hljs-number">1002</span>;   &#125;   <span class="hljs-section">server</span> &#123;       <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;       <span class="hljs-attribute">server_name</span>  localhost;       <span class="hljs-attribute">location</span> / &#123;        <span class="hljs-attribute">proxy_pass</span> http://localhost-server;        <span class="hljs-attribute">proxy_redirect</span> default;      &#125;    &#125;&#125;</code></pre></div><p>如果要修改负载均衡算法修改对应upstream模块即可。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Nginx</title>
      <link href="/2019/09/13/Docker%E5%AE%89%E8%A3%85Nginx/"/>
      <url>/2019/09/13/Docker%E5%AE%89%E8%A3%85Nginx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="1-查看可用的-Nginx-版本"><a href="#1-查看可用的-Nginx-版本" class="headerlink" title="1.查看可用的 Nginx 版本"></a>1.<strong>查看可用的 Nginx 版本</strong></h4><p>可以用<code>docker search nginx</code> 命令来查看可用版本</p><h4 id="2-取-Nginx-镜像"><a href="#2-取-Nginx-镜像" class="headerlink" title="2.取 Nginx 镜像"></a>2.<strong>取 Nginx 镜像</strong></h4><p>这里我们拉取官方的最新版本的镜像：<code>docker pull nginx:latest</code>  </p><h4 id="3-查看本地镜像"><a href="#3-查看本地镜像" class="headerlink" title="3.查看本地镜像"></a>3.<strong>查看本地镜像</strong></h4><p>使用以下命令来查看是否已安装了 nginx：<code>docker images</code></p><div class="hljs"><pre><code class="hljs angelscript">docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEnginx               latest              c7460dfcab50        <span class="hljs-number">2</span> months ago        <span class="hljs-number">126</span>MBredis               latest              f7302e4ab3a8        <span class="hljs-number">7</span> months ago        <span class="hljs-number">98.2</span>MB</code></pre></div><p>可以看到我们已经安装了最新版本（latest）的 nginx 镜像。</p><h4 id="4-运行容器"><a href="#4-运行容器" class="headerlink" title="4.运行容器"></a>4.<strong>运行容器</strong></h4><p>安装完成后，我们可以使用以下命令来运行 nginx 容器：  </p><div class="hljs"><pre><code class="hljs angelscript">docker run --name nginx-test -p <span class="hljs-number">8080</span>:<span class="hljs-number">80</span> -d nginx</code></pre></div><p>参数说明：</p><p>–name nginx-test：容器名称。<br>-p 8080:80： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。<br>-d nginx： 设置容器在在后台一直运行。</p><h4 id="5-安装成功"><a href="#5-安装成功" class="headerlink" title="5.安装成功"></a>5.<strong>安装成功</strong></h4><p>最后我们可以通过浏览器可以直接访问 8080 端口的 nginx 服务。</p><h4 id="6-写在后面"><a href="#6-写在后面" class="headerlink" title="6.写在后面"></a>6.<strong>写在后面</strong></h4><p>执行完前面的步骤就可以在docker里使用nginx,但是我建议直接从容器里复制一份nginx文件到宿主，这样映射起来更加简洁明了</p><h5 id="6-1查看容器"><a href="#6-1查看容器" class="headerlink" title="6.1查看容器"></a>6.1查看容器</h5><p><code>docker ps</code></p><h5 id="6-2进入容器目录"><a href="#6-2进入容器目录" class="headerlink" title="6.2进入容器目录"></a>6.2进入容器目录</h5><p><code>docker exec -it containerID /bin/bash</code></p><h5 id="6-3列出文件列表"><a href="#6-3列出文件列表" class="headerlink" title="6.3列出文件列表"></a>6.3列出文件列表</h5><p><code>ls -l</code><br>结果如下</p><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>c7837a1ec864:/# ls -ltotal <span class="hljs-number">76</span>drwxr-xr-x  <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> Dec <span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span> bindrwxr-xr-x  <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> Nov <span class="hljs-number">10</span> <span class="hljs-number">12</span>:<span class="hljs-number">17</span> bootdrwxr-xr-x  <span class="hljs-number">5</span> root root  <span class="hljs-number">340</span> Apr <span class="hljs-number">16</span> <span class="hljs-number">09</span>:<span class="hljs-number">44</span> devdrwxr-xr-x  <span class="hljs-number">1</span> root root <span class="hljs-number">4096</span> Apr <span class="hljs-number">15</span> <span class="hljs-number">08</span>:<span class="hljs-number">29</span> etcdrwxr-xr-x  <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> Nov <span class="hljs-number">10</span> <span class="hljs-number">12</span>:<span class="hljs-number">17</span> homedrwxr-xr-x  <span class="hljs-number">1</span> root root <span class="hljs-number">4096</span> Jan  <span class="hljs-number">9</span> <span class="hljs-number">22</span>:<span class="hljs-number">20</span> libdrwxr-xr-x  <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> Dec <span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span> lib64drwxr-xr-x  <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> Dec <span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span> mediadrwxr-xr-x  <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> Dec <span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span> mntdrwxr-xr-x  <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> Dec <span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span> optdr-xr-xr-x <span class="hljs-number">95</span> root root    <span class="hljs-number">0</span> Apr <span class="hljs-number">16</span> <span class="hljs-number">09</span>:<span class="hljs-number">44</span> procdrwx------  <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> Dec <span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span> rootdrwxr-xr-x  <span class="hljs-number">1</span> root root <span class="hljs-number">4096</span> Apr <span class="hljs-number">16</span> <span class="hljs-number">09</span>:<span class="hljs-number">44</span> rundrwxr-xr-x  <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> Dec <span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span> sbindrwxr-xr-x  <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> Dec <span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span> srvdr-xr-xr-x <span class="hljs-number">13</span> root root    <span class="hljs-number">0</span> Apr <span class="hljs-number">15</span> <span class="hljs-number">05</span>:<span class="hljs-number">22</span> sysdrwxrwxrwt  <span class="hljs-number">1</span> root root <span class="hljs-number">4096</span> Jan  <span class="hljs-number">9</span> <span class="hljs-number">22</span>:<span class="hljs-number">20</span> tmpdrwxr-xr-x  <span class="hljs-number">1</span> root root <span class="hljs-number">4096</span> Dec <span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span> usrdrwxr-xr-x  <span class="hljs-number">1</span> root root <span class="hljs-number">4096</span> Dec <span class="hljs-number">24</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span> var</code></pre></div><p>看需要复制文件，我直接将整个nginx文件夹复制到了本地</p><h5 id="6-4复制"><a href="#6-4复制" class="headerlink" title="6.4复制"></a>6.4复制</h5><p><code>docker cp -a containerID:/nginx /data/nginx</code><br> 然后根据需求进行本地映射</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用</title>
      <link href="/2019/09/13/Docker%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/13/Docker%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-Docker的简介"><a href="#1-Docker的简介" class="headerlink" title="1.Docker的简介"></a>1.Docker的简介</h3><p>Docker 是一个开源的应用容器引擎，基于Go语言并遵从Apache2.0协议开源。让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口。</p><h3 id="2-Docker的组成："><a href="#2-Docker的组成：" class="headerlink" title="2.Docker的组成："></a>2.Docker的组成：</h3><ul><li>1 Docker Client 客户端</li><li>2 Docker Daemon 守护进程</li><li>3 Docker Image 镜像</li><li>4 Docker Container 容器<br>从2017年3月开始Docker在原来的基础上分为两个分支版本: Docker CE 和 Docker EE。Docker CE 即社区免费版，Docker EE 即企业版，强调安全，但需付费使用。</li></ul><h3 id="3Docker-CE的安装"><a href="#3Docker-CE的安装" class="headerlink" title="3Docker CE的安装"></a>3Docker CE的安装</h3><h4 id="1-卸载较旧版本"><a href="#1-卸载较旧版本" class="headerlink" title="1.卸载较旧版本"></a>1.卸载较旧版本</h4><p>较旧版本的Docker被称为docker或docker-engine,如果已安装这些，请卸载它们。未安装略过此步骤</p><div class="hljs"><pre><code class="hljs properties"><span class="hljs-attr">yum</span> <span class="hljs-string">remove -y docker \              docker-client \              docker-client-latest \              docker-common \              docker-latest \              docker-latest-logrotate \              docker-logrotate \              docker-engine</span></code></pre></div><h4 id="2-安装所需要的软件"><a href="#2-安装所需要的软件" class="headerlink" title="2.安装所需要的软件"></a>2.安装所需要的软件</h4><div class="hljs"><pre><code class="hljs gml">yum install -<span class="hljs-symbol">y</span> yum-utils device-mapper-<span class="hljs-symbol">persistent</span>-data lvm2</code></pre></div><h4 id="3-设置Docker的存储库"><a href="#3-设置Docker的存储库" class="headerlink" title="3.设置Docker的存储库"></a>3.设置Docker的存储库</h4><div class="hljs"><pre><code class="hljs vim">yum-config-manager --<span class="hljs-built_in">add</span>-repo http<span class="hljs-variable">s:</span>//download.docker.<span class="hljs-keyword">com</span>/linux/centos/docker-<span class="hljs-keyword">ce</span>.repo</code></pre></div><h4 id="4-安装最新版Docker-ce"><a href="#4-安装最新版Docker-ce" class="headerlink" title="4.安装最新版Docker-ce"></a>4.安装最新版Docker-ce</h4><div class="hljs"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y docker-ce</code></pre></div><p><strong>如遇错误提示：</strong><br>错误：软件包：3:docker-ce-18.09.6-3.el7.x86_64 (docker-ce-stable)<br>需要：container-selinux &gt;= 2.9</p><p>执行以下命令,下载container-selinux-2.95的rpm包</p><div class="hljs"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//mi</span>rror.centos.org<span class="hljs-regexp">/centos/</span><span class="hljs-number">7</span><span class="hljs-regexp">/extras/</span>x86_64<span class="hljs-regexp">/Packages/</span>container-selinux-<span class="hljs-number">2.95</span>-<span class="hljs-number">2</span>.el7_6.noarch.rpm</code></pre></div><p>安装</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">rpm</span> <span class="hljs-selector-tag">-ivh</span> <span class="hljs-selector-tag">container-selinux-2</span><span class="hljs-selector-class">.95-2</span><span class="hljs-selector-class">.el7_6</span><span class="hljs-selector-class">.noarch</span><span class="hljs-selector-class">.rpm</span></code></pre></div><p>再次执行安装命令:</p><div class="hljs"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y docker-ce</code></pre></div><h4 id="5-启动docker"><a href="#5-启动docker" class="headerlink" title="5.启动docker"></a>5.启动docker</h4><div class="hljs"><pre><code class="hljs 1c">systemctl daemon-reload <span class="hljs-meta">&amp;&amp; systemctl start docker</span></code></pre></div><p>查看docker的版本<code>docker version</code></p><p>显示</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">Client:</span> <span class="hljs-attr">Version:</span>           <span class="hljs-number">18.09</span><span class="hljs-number">.6</span> <span class="hljs-attr">API version:</span>       <span class="hljs-number">1.39</span> <span class="hljs-attr">Go version:</span>        <span class="hljs-string">go1.10.8</span> <span class="hljs-attr">Git commit:</span>        <span class="hljs-string">481bc77156</span> <span class="hljs-attr">Built:</span>             <span class="hljs-string">Sat</span> <span class="hljs-string">May</span>  <span class="hljs-number">4</span> <span class="hljs-number">02</span><span class="hljs-string">:34:58</span> <span class="hljs-number">2019</span> <span class="hljs-attr">OS/Arch:</span>           <span class="hljs-string">linux/amd64</span> <span class="hljs-attr">Experimental:</span>      <span class="hljs-literal">false</span><span class="hljs-attr">Server:</span> <span class="hljs-string">Docker</span> <span class="hljs-string">Engine</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Community</span> <span class="hljs-attr">Engine:</span>  <span class="hljs-attr">Version:</span>          <span class="hljs-number">18.09</span><span class="hljs-number">.6</span>  <span class="hljs-attr">API version:</span>      <span class="hljs-number">1.39</span> <span class="hljs-string">(minimum</span> <span class="hljs-string">version</span> <span class="hljs-number">1.12</span><span class="hljs-string">)</span>  <span class="hljs-attr">Go version:</span>       <span class="hljs-string">go1.10.8</span>  <span class="hljs-attr">Git commit:</span>       <span class="hljs-string">481bc77</span>  <span class="hljs-attr">Built:</span>            <span class="hljs-string">Sat</span> <span class="hljs-string">May</span>  <span class="hljs-number">4</span> <span class="hljs-number">02</span><span class="hljs-string">:02:43</span> <span class="hljs-number">2019</span>  <span class="hljs-attr">OS/Arch:</span>          <span class="hljs-string">linux/amd64</span>  <span class="hljs-attr">Experimental:</span>     <span class="hljs-literal">false</span></code></pre></div><p>即<strong>安装成功</strong><br><strong>查看更详细的的信息</strong><code>docker info</code></p><p><strong>Docker常用命令</strong> </p><p>可以直接在终端输入<code>docker --help</code>列出所有docker的用法以及所有命令</p><p><strong>查看本地存在的docker镜像</strong><code>docker images</code></p><div class="hljs"><pre><code class="hljs angelscript">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEnginx               latest              c7460dfcab50        <span class="hljs-number">2</span> months ago        <span class="hljs-number">126</span>MBredis               latest              f7302e4ab3a8        <span class="hljs-number">7</span> months ago        <span class="hljs-number">98.2</span>MB</code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2019/08/26/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/08/26/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-cd命令"><a href="#1-cd命令" class="headerlink" title="1.cd命令"></a>1.cd命令</h3><p><code>命令格式：cd &lt;路径&gt;</code><br>意义：cd是change directory 的缩写；cd命令后面跟一个路径，用于切换当前用户所在的路径，其中路径可以是绝对路径也可以是相对路径。<br>示例：<br><code>cd /system/bin</code> 表示切换到/system/bin路径下。<br><code>cd logs</code> 表示切换到logs路径下。<br><code>cd /</code> 表示切换到根目录。<br><code>cd ../</code> 表示切换到上一层路径。</p><h3 id="2-ls命令"><a href="#2-ls命令" class="headerlink" title="2.ls命令"></a>2.ls命令</h3><p><code>命令格式：ls &lt;参数&gt; &lt;路径&gt;</code><br>意义：ls是list的缩写；ls命令后面可以跟一个路径或参数，也可以不跟，表示列出路径或当前目录下的所有文件信息。最常用的的参数是“-l”，也就是“ls -l”命令。<br>示例：<br><code>ls /</code>显示根目录下的所有文件及文件夹。<br><code>ls -l /data</code>显示/data路径下的所有文件及文件夹的详细信息。<br><code>ls -l</code>显示当前路径下的所有文件及文件夹的详细信息<br><code>ls *l wc</code>显示当前目录下面的文件数量。</p><h3 id="3-rm命令"><a href="#3-rm命令" class="headerlink" title="3.rm命令"></a>3.rm命令</h3><p><code>命令格式： rm &lt;文件&gt; 或 rm -r &lt;文件夹&gt;</code><br>意义：rm是remove 的缩写。用于删除文件或文件夹，常用参数-r -f，-r表示删除目录，也可以用于删除文件，-f表示强制删除，不需要确认。同样的，删除文件前需保证当前用户对当前路径有修改的权限。<br>示例：<br><code>rm -rf path</code> 删除path。<br><code>rm test.txt</code> 删除test.txt。</p><h3 id="4-mkdir命令"><a href="#4-mkdir命令" class="headerlink" title="4.mkdir命令"></a>4.mkdir命令</h3><p><code>命令格式： mkdir 文件夹</code><br>意义：mkdir是make directory 的缩写。用于创建文件夹。创建文件夹前需保证当前用户对当前路径有修改的权限。<br>示例：<br><code>mkdir /data/path</code> 在/data路径下创建path文件夹。<br><code>mkdir -p a/b/c</code> 参数 -p用于创建多级文件夹，这句命令表示在当前路径下创建文件夹a， 而a文件夹包含子文件夹b，b文件夹下又包含子文件夹c。</p><h3 id="5-cp命令"><a href="#5-cp命令" class="headerlink" title="5.cp命令"></a>5.cp命令</h3><p><code>命令格式： cp &lt;文件&gt;&lt;目标文件&gt;或者cp -r&lt;文件夹&gt;&lt;目标文件夹&gt;</code><br>意义：cp是copy 的缩写。用于复制文件或文件夹。<br>示例：<br><code>cp /data/logs /data/local/tmp/logs</code>复制/data路径下的logs到/data/local/tmp路径下。<br><code>cp 1.sh /sdcard/</code> 复制当前路径下的1.sh到/sdcard下。</p><h3 id="6-ps命令"><a href="#6-ps命令" class="headerlink" title="6.ps命令"></a>6.ps命令</h3><p><code>ps [options] [--help]</code><br>用于显示当前进程 (process) 的状态。<br>参数：</p><p>ps 的参数非常多, 在此仅列出几个常用的参数并大略介绍含义<br>-A 列出所有的行程<br>-w 显示加宽可以显示较多的资讯<br>-au 显示较详细的资讯<br>-aux 显示所有包含其他使用者的行程<br>au(x) 输出格式 :<br>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND<br>USER: 行程拥有者<br>PID: pid<br>%CPU: 占用的 CPU 使用率<br>%MEM: 占用的记忆体使用率<br>VSZ: 占用的虚拟记忆体大小<br>RSS: 占用的记忆体大小<br>TTY: 终端的次要装置号码 (minor device number of tty)<br>STAT: 该行程的状态:<br>D: 无法中断的休眠状态 (通常 IO 的进程)<br>R: 正在执行中<br>S: 静止状态<br>T: 暂停执行<br>Z: 不存在但暂时无法消除<br>W: 没有足够的记忆体分页可分配<br>&lt;: 高优先序的行程<br>N: 低优先序的行程<br>L: 有记忆体分页分配并锁在记忆体内 (实时系统或捱A I/O)<br>START: 行程开始时间<br>TIME: 执行的时间<br>COMMAND:所执行的指令<br>示例：<br><code>ps -A</code> 显示进程信息<br>显示指定用户信息<br><code>ps -u root</code>显示root进程用户信息<br>显示所有进程信息，连同命令行<br><code>ps -ef</code>显示所有命令，连带命令行<br><code>ps -ef |grep java</code> 正在运行的java进程</p><h3 id="7-kill命令"><a href="#7-kill命令" class="headerlink" title="7.kill命令"></a>7.kill命令</h3><p><code>命令格式：kill PID码</code><br>意义：结束当前进程<br>示例：<br>先通过输入命令<code>ps au</code>查看进程，找到需要终止进程的PID再通过kill PID即可，如我这里想要终止的进程是vim test.py，查到的PID是3163，我们可以输入kill 3163结束这个程序，如果结束不了，可以通过kill -9 PID码强制结束，即kii -9 3163</p><h3 id="8-find命令"><a href="#8-find命令" class="headerlink" title="8.find命令"></a>8.find命令</h3><p><code>命令格式：find   path   -option   [   -print ]   [ -exec   -ok   command ]   {} \;</code><br>意义：在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。 </p><p>参数说明 :</p><p>find 根据下列规则判断 path 和 expression，在命令列上第一个 - ( ) , ! 之前的部份为 path，之后的是 expression。如果 path 是空字串则使用目前路径，如果 expression 是空字串则使用 -print 为预设 expression。</p><p>expression 中可使用的选项有二三十个之多，在此只介绍最常用的部份。</p><p>-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件</p><p>-amin n : 在过去 n 分钟内被读取过</p><p>-anewer file : 比文件 file 更晚被读取过的文件</p><p>-atime n : 在过去n天内被读取过的文件</p><p>-cmin n : 在过去 n 分钟内被修改过</p><p>-cnewer file :比文件 file 更新的文件</p><p>-ctime n : 在过去n天内被修改过的文件</p><p>-empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name</p><p>-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写</p><p>-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写</p><p>-size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。-type c : 文件类型是 c 的文件。</p><p>d: 目录</p><p>c: 字型装置文件</p><p>b: 区块装置文件</p><p>p: 具名贮列</p><p>f: 一般文件</p><p>l: 符号连结</p><p>s: socket</p><p>-pid n : process id 是 n 的文件</p><p>你可以使用 ( ) 将运算式分隔，并使用下列运算。</p><p>exp1 -and exp2</p><p>! expr</p><p>-not expr</p><p>exp1 -or exp2</p><p>exp1, exp2<br>示例：<br><code>find . -name &quot;*.c&quot;</code>将目前目录及其子目录下所有延伸档名是 c 的文件列出来。<br><code># find . -type f</code>将目前目录其其下子目录中所有一般文件列出<br><code>find / -size +500M -print0|xargs -0 du -m|sort -nr</code>find指令为找出500M以上的文件，print0和xargs -0配合使用，用来解决文件名中有空格或特殊字符问题。du -m是查看这些文件的大小，并以m为单位显示。最后sort -nr是按照数字反向排序（大的文件在前）<br><code>find / -name *xxx*.c</code> 模糊查找xxx.c的文件</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2019/08/08/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/08/08/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><p>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。<br>注：标准语法一般在#后跟个空格再写文字</p><p><strong>示例</strong></p><div class="hljs"><pre><code class="hljs clean"># 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题</code></pre></div><p><strong>效果</strong>  </p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr><h5 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h5><p>加粗<br>要加粗的文字左右分别用两个*号包起来</p><p>斜体<br>要倾斜的文字左右分别用一个*号包起来</p><p>斜体加粗<br>要倾斜和加粗的文字左右分别用三个*号包起来</p><p>删除线<br>要加删除线的文字左右分别用两个~~号包起来</p><p><strong>示例</strong></p><div class="hljs"><pre><code class="hljs asciidoc">*<span class="hljs-strong">*这是加粗的文字*</span>*<span class="hljs-strong">*这是倾斜的文字*</span>**<span class="hljs-strong">*这是斜体加粗的文字*</span>**~~这是加删除线的文字~~</code></pre></div><p><strong>效果</strong>  </p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del>  </p><hr><h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br><strong>示例</strong></p><div class="hljs"><pre><code class="hljs ruby">&gt;这是引用的内容<span class="hljs-meta">&gt;&gt;</span>这是引用的内容<span class="hljs-meta">&gt;&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</code></pre></div><p><strong>效果</strong>  </p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><h5 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h5><p>三个或者三个以上的 - 或者 * 都可以。<br><strong>示例</strong></p><div class="hljs"><pre><code class="hljs asciidoc"><span class="hljs-section">-------</span><span class="hljs-bullet">***</span>****<span class="hljs-strong">*</span></code></pre></div><p><strong>效果</strong>   </p><hr><hr><hr><hr><h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h5><p>语法：</p><p>![图片alt](图片地址 ‘’图片title’’)</p><p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<br><strong>示例</strong></p><div class="hljs"><pre><code class="hljs angelscript">![blockchain](https:<span class="hljs-comment">//ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span>u=<span class="hljs-number">702257389</span>,<span class="hljs-number">1274025419</span>&amp;fm=<span class="hljs-number">27</span>&amp;gp=<span class="hljs-number">0.</span>jpg <span class="hljs-string">"区块链"</span>)</code></pre></div><p><strong>效果</strong><br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&fm=27&gp=0.jpg" srcset="/img/loading.gif" alt="blockchain" title="区块链"></p><hr><h5 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h5><p>语法：</p><p><a href="超链接地址" title="超链接title">超链接名</a><br>title可加可不加<br><strong>示例</strong></p><div class="hljs"><pre><code class="hljs markdown">[<span class="hljs-string">简书</span>](<span class="hljs-link">http://jianshu.com</span>)[<span class="hljs-string">百度</span>](<span class="hljs-link">http://baidu.com</span>)</code></pre></div><p><strong>效果</strong><br><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><hr><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><ul><li>1.无序列表<br>语法：<br>无序列表用 - + * 任何一种都可以</li></ul><p><strong>示例</strong>  </p><div class="hljs"><pre><code class="hljs markdown"><span class="hljs-bullet">- </span>列表内容<span class="hljs-bullet">+ </span>列表内容<span class="hljs-bullet">* </span>列表内容注意：- + * 跟内容之间都要有一个空格</code></pre></div><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>2.有序列表<br>语法：<br>数字加点</li></ul><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span> 列表内容<span class="hljs-number">2.</span> 列表内容<span class="hljs-number">3.</span> 列表内容注意：序号跟内容之间要有空格</code></pre></div><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><ul><li>3.列表嵌套<br>上一级和下一级之间敲三个空格即可</li></ul><div class="hljs"><pre><code class="hljs markdown"><span class="hljs-bullet">- </span>一级无序列表内容   <span class="hljs-bullet">   - </span>二级无序列表内容   <span class="hljs-bullet">   - </span>二级无序列表内容   <span class="hljs-bullet">   - </span>二级无序列表内容</code></pre></div><ul><li>一级无序列表内容   <ul><li>二级无序列表内容   </li><li>二级无序列表内容   </li><li>二级无序列表内容</li></ul></li></ul><hr><h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><p>语法：</p><div class="hljs"><pre><code class="hljs gherkin">表头|<span class="hljs-string">表头</span>|<span class="hljs-string">表头---</span>|<span class="hljs-string">:--:</span>|<span class="hljs-string">---:内容</span>|<span class="hljs-string">内容</span>|<span class="hljs-string">内容内容</span>|<span class="hljs-string">内容</span>|<span class="hljs-string">内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 </span>|<span class="hljs-string"> 包起来。此处省略</span></code></pre></div><p><strong>示例</strong></p><div class="hljs"><pre><code class="hljs gherkin">姓名|<span class="hljs-string">技能</span>|<span class="hljs-string">排行--</span>|<span class="hljs-string">:--:</span>|<span class="hljs-string">--:刘备</span>|<span class="hljs-string">哭</span>|<span class="hljs-string">大哥关羽</span>|<span class="hljs-string">打</span>|<span class="hljs-string">二哥张飞</span>|<span class="hljs-string">骂</span>|<span class="hljs-string">三弟</span></code></pre></div><p><strong>效果</strong>  </p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p><div class="hljs"><pre><code class="hljs arcade"><span class="hljs-string">`代码内容`</span></code></pre></div><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><div class="hljs"><pre><code class="hljs autohotkey">(```)代码代码  代码（```）</code></pre></div><blockquote><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。  </p></blockquote><p><strong>示例</strong><br>单行代码<br><code>create database hero;</code></p><p>代码块</p><div class="hljs"><pre><code class="hljs kotlin">function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;     echo <span class="hljs-string">"这是一句非常牛逼的代码"</span>;&#125;<span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;</code></pre></div><h5 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h5><div class="hljs"><pre><code class="hljs flow">st&#x3D;&gt;start: 开始op&#x3D;&gt;operation: My Operationcond&#x3D;&gt;condition: Yes or No?e&#x3D;&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;</code></pre></div><p>摘自<a href="https://www.jianshu.com/p/191d1e21f7ed/" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed/</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@Controller与@RestController的区别</title>
      <link href="/2019/08/05/Difference-between-Controller-and-RestController/"/>
      <url>/2019/08/05/Difference-between-Controller-and-RestController/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1.使用@RestController注解相当于同时在Controller上使用了@Controller+@ResponsBody注解（或者Controller上使用@Controller注解+方法块上使用@ResponseBody注解）；<br>2.只在Controller上使用@RestController注解只能返回return中的内容无法返回jsp/html页面(配置的视图解析器 InternalResourceViewResolver不起作用)<br>3.若想使Controller返回视图则需使用@Controller注解；同时需要返回数据则需在对应方法上加注@ResponseBody</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat部署多项目</title>
      <link href="/2019/07/29/Tomcat%E9%83%A8%E7%BD%B2%E5%A4%9A%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/07/29/Tomcat%E9%83%A8%E7%BD%B2%E5%A4%9A%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-单个Tomcat"><a href="#1-单个Tomcat" class="headerlink" title="1.单个Tomcat"></a>1.单个Tomcat</h3><p>略。<br> 参考<a href="https://www.cnblogs.com/casefour/p/11843582.html" target="_blank" rel="noopener">一个tomcat同时部署多个项目</a></p><h3 id="2-多个Tomcat"><a href="#2-多个Tomcat" class="headerlink" title="2.多个Tomcat"></a>2.多个Tomcat</h3><p>   以windows为例<br>   安装配置多个tomcat后，不同的tomcat配置不同的端口，打开cmd分别进入各个tomcat的bin文件夹输入命令<br>        <code>service.bat install/remove [service_name]/[user username]</code><br> 进行服务的安装卸载。不同端口服务应起不同的名字，不然会报错。然后在windows的服务里进行设置服务的启停以及开机启动。</p> <p><svg class="big-icon" aria-hidden="true">    <use xlink:href="#icon-Tomcat"></use></svg> <svg class="icon" aria-hidden="true">    <use xlink:href="#icon-Tomcat"></use></svg> <svg class="icon" aria-hidden="true">    <use xlink:href="#icon-Tomcat"></use></svg> <svg class="big-icon" aria-hidden="true">    <use xlink:href="#icon-Tomcat"></use></svg><svg class="icon" aria-hidden="true">    <use xlink:href="#icon-Tomcat"></use></svg> </p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2019/07/28/MyBatis/"/>
      <url>/2019/07/28/MyBatis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h5 id="和-的区别。"><a href="#和-的区别。" class="headerlink" title="#{}和${}的区别。"></a>#{}和${}的区别。</h5><p>#{}是预编译处理，${}是字符串替换。<br>Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；<br>Mybatis在处理{}替换成变量的值。<br>使用#{}可以有效的防止SQL注入，提高系统安全性。</p><h5 id="如何获取自动生成的-主-键值。"><a href="#如何获取自动生成的-主-键值。" class="headerlink" title="如何获取自动生成的(主)键值。"></a>如何获取自动生成的(主)键值。</h5><p>insert 方法总是返回一个int值 - 这个值代表的是插入的行数。<br>而自动生成的键值在 insert 方法执行完后可以被设置到传入的参数对象中。<br>示例：  </p><div class="hljs"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"insert"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"Spares"</span>         <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">"id"</span>&gt;</span>INSERT INTO spares (spares_id, spares_name, spares_type_id, spares_spec)VALUES (#</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="xml">, #</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="xml">, #</span><span class="hljs-template-variable">&#123;typeId&#125;</span><span class="xml">, #</span><span class="hljs-template-variable">&#123;spec&#125;</span><span class="xml">)<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇水贴</title>
      <link href="/2019/07/27/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B0%B4%E8%B4%B4/"/>
      <url>/2019/07/27/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B0%B4%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>从自制后台转到hexo,特此纪念。</p></blockquote><p>更换了新的<a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank" rel="noopener">fluid</a>主题,我觉得也很好看，相对于bufferfly配置可能没特别多，但是相对来说能让我找到重心是啥。</p><h2 id="valine邮件通知"><a href="#valine邮件通知" class="headerlink" title="valine邮件通知"></a>valine邮件通知</h2><p>不经意看到有关valine评论邮件提醒的帖子然后也试着在自己的博客里也添加了此功能，不过不知道是因为人品不行还是leancloud趁我不注意调戏我，今天总算是把评论发邮件弄好了。<br>踩的坑竟然是字段错误。。。原文<a href="http://www.zhaojun.im/hexo-valine-modify/" target="_blank" rel="noopener">Hexo 优化 — 支持邮件通知的评论 Valine 增强版</a>   </p><h3 id="1-云引擎部署评论后台"><a href="#1-云引擎部署评论后台" class="headerlink" title="1.云引擎部署评论后台"></a>1.云引擎部署评论后台</h3><p>按照步骤首先进入<a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">leancloud</a>相应应用——》云引擎——》设置，修改代码库为<br><code>https://github.com/zhaojun1998/Valine-Admin</code></p><p><img src="/images/pasted-0.png" srcset="/img/loading.gif" alt="upload successful"><br>但是我第一步就出错了，</p><p><img src="/images/pasted-5.png" srcset="/img/loading.gif" alt="upload successful"></p><p><img src="/images/pasted-6.png" srcset="/img/loading.gif" alt="upload successful"><br>项目一直down不下来<br>经<a href="https://royce2003.top/" target="_blank" rel="noopener">Royce</a>弟弟指点fork项目至我的github然后修改</p><p><img src="/images/pasted-3.png" srcset="/img/loading.gif" alt="upload successful">node版本，修改地址重新部署，成功~。</p><h3 id="2-添加新变量"><a href="#2-添加新变量" class="headerlink" title="2.添加新变量"></a>2.添加新变量</h3><p>然后设置——》添加新变量</p><p><img src="/images/pasted-7.png" srcset="/img/loading.gif" alt="upload successful"><br>但是按照原文只填写 </p><table><thead><tr><th>key</th><th align="center">value</th></tr></thead><tbody><tr><td>SITE_NAME</td><td align="center">网站名称</td></tr><tr><td>SITE_URL</td><td align="center">网站地址, 最后不要加 <code>/</code></td></tr><tr><td>SMTP_USER</td><td align="center">SMTP 服务用户名，一般为邮箱地址</td></tr><tr><td>SMTP_PASS</td><td align="center">SMTP 密码，一般为授权码，而不是邮箱的登陆密码</td></tr><tr><td>SMTP_SERVICE</td><td align="center">邮件服务提供商，支持 <code>QQ</code>、<code>163</code>、<code>126</code>、<code>Gmail</code>、<code>Yahoo</code>、……</td></tr><tr><td>SENDER_NAME</td><td align="center">寄件人名称</td></tr></tbody></table><p>leancloud会报错</p><div class="hljs"><pre><code class="hljs crystal"><span class="hljs-symbol">Error:</span> Mail command <span class="hljs-symbol">failed:</span> <span class="hljs-number">550</span> Invalid User    at SMTPConnection._formatError (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:605:19)</span>    at SMTPConnection._actionMAIL (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:1370:34)</span>    at SMTPConnection.&lt;anonymous&gt; (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:857:18)</span>    at SMTPConnection._processResponse (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:764:20)</span>    at SMTPConnection._onData (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:570:14)</span>    at TLSSocket.&lt;anonymous&gt; (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:522:47)</span>    at TLSSocket.emit (events.<span class="hljs-symbol">js:</span><span class="hljs-number">311</span>:<span class="hljs-number">20</span>)    at addChunk (_stream_readable.<span class="hljs-symbol">js:</span><span class="hljs-number">294</span>:<span class="hljs-number">12</span>)    at readableAddChunk (_stream_readable.<span class="hljs-symbol">js:</span><span class="hljs-number">275</span>:<span class="hljs-number">11</span>)    at TLSSocket.Readable.push (_stream_readable.<span class="hljs-symbol">js:</span><span class="hljs-number">209</span>:<span class="hljs-number">10</span>)    at TLSWrap.onStreamRead (internal/stream_base_commons.<span class="hljs-symbol">js:</span><span class="hljs-number">186</span>:<span class="hljs-number">23</span>) &#123;  <span class="hljs-symbol">code:</span> <span class="hljs-string">'EENVELOPE'</span>,  <span class="hljs-symbol">response:</span> <span class="hljs-string">'550 Invalid User'</span>,  <span class="hljs-symbol">responseCode:</span> <span class="hljs-number">550</span>,  <span class="hljs-symbol">command:</span> <span class="hljs-string">'MAIL FROM'</span>&#125;Akismet key 异常!<span class="hljs-symbol">Error:</span> No recipients defined    at SMTPConnection._formatError (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:605:19)</span>    at SMTPConnection._setEnvelope (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:817:34)</span>    at SMTPConnection.send (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:443:14)</span>    at sendMessage (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">transport</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:226:28)</span>    at /home/leanengine/app/node_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">transport</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:284:25</span>    at SMTPConnection._actionAUTHComplete (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:1354:9)</span>    at SMTPConnection.&lt;anonymous&gt; (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:378:26)</span>    at SMTPConnection._processResponse (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:764:20)</span>    at SMTPConnection._onData (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:570:14)</span>    at TLSSocket.&lt;anonymous&gt; (<span class="hljs-regexp">/home/leanengine</span><span class="hljs-regexp">/app/node</span>_modules/nodemailer/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">smtp</span>-<span class="hljs-title">connection</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:522:47)</span>    at TLSSocket.emit (events.<span class="hljs-symbol">js:</span><span class="hljs-number">311</span>:<span class="hljs-number">20</span>)    at addChunk (_stream_readable.<span class="hljs-symbol">js:</span><span class="hljs-number">294</span>:<span class="hljs-number">12</span>)    at readableAddChunk (_stream_readable.<span class="hljs-symbol">js:</span><span class="hljs-number">275</span>:<span class="hljs-number">11</span>)    at TLSSocket.Readable.push (_stream_readable.<span class="hljs-symbol">js:</span><span class="hljs-number">209</span>:<span class="hljs-number">10</span>)    at TLSWrap.onStreamRead (internal/stream_base_commons.<span class="hljs-symbol">js:</span><span class="hljs-number">186</span>:<span class="hljs-number">23</span>) &#123;  <span class="hljs-symbol">code:</span> <span class="hljs-string">'EENVELOPE'</span>,  <span class="hljs-symbol">command:</span> <span class="hljs-string">'API'</span>&#125;</code></pre></div><p>后来添加了</p><table><thead><tr><th>key</th><th align="center">value</th></tr></thead><tbody><tr><td>SENDER_EMAIL</td><td align="center">发件人邮箱</td></tr><tr><td>BLOGGER_EMAIL</td><td align="center">博客邮箱</td></tr><tr><td>AKISMET_KEY</td><td align="center">垃圾留言过滤系统key值</td></tr></tbody></table><p>其中<code>SENDER_EMAIL</code>应该是必填项。<code>AKISMET_KEY</code>可以通过<a href="https://akismet.com/" target="_blank" rel="noopener">akismet</a>注册得到，懒得弄的话也非必填。然后就可以发送成功了</p><div class="hljs"><pre><code class="hljs actionscript">AT通知邮件成功发送: <span class="hljs-number">250</span> Mail OK queued <span class="hljs-keyword">as</span> smtp3,xxxxx</code></pre></div><p>通过在新变量里添加新的参数绑定的<code>ADMIN_URL</code>域名便可以远程管理评论了~</p><p><img src="/images/pasted-9.png" srcset="/img/loading.gif" alt="upload successful"></p><table><thead><tr><th>key</th><th align="center">value</th></tr></thead><tbody><tr><td>ADMIN_URL</td><td align="center">域名</td></tr><tr><td>也可以绑定已经备案过的自己的独立域名（leancloud绑定过云引擎域名后上述web主机域名位置显示的还是默认域名，但实际上绑定后的独立域名已经生效了）访问评论管理网页</td><td align="center"></td></tr></tbody></table><p><img src="/images/pasted-10.png" srcset="/img/loading.gif" alt="upload successful"></p><p><img src="/images/pasted-11.png" srcset="/img/loading.gif" alt="upload successful"></p><blockquote><p><strong>每次修改参数一定要重启容器！！！！！！！！！！</strong></p></blockquote><h3 id="3-定时唤醒"><a href="#3-定时唤醒" class="headerlink" title="3.定时唤醒"></a>3.定时唤醒</h3><p>因为免费版本的leancloud云引擎会每天定时休眠6 个小时所以需要设置定时唤醒<br>添加定时任务，名称随便填，选择self_wake任务，添加cron表达式，我设置的同原作者一样<br>0 <em>/20 7-23 * * ?  为*</em>8 点到 23 点每 20 分钟唤醒一次**可自定义</p><p><img src="/images/pasted-4.png" srcset="/img/loading.gif" alt="upload successful"></p><hr><h2 id="加密文章"><a href="#加密文章" class="headerlink" title="加密文章"></a>加密文章</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h3><ul><li><p>一旦你输入了正确的密码, 它将会被存储在本地浏览器的localStorage中。再次访问，不需输入密码。</p></li><li><p>支持按标签加密。</p></li><li><p>所有的核心功能都是由原生的API所提供的。 在 Node.js中, 我们使用 Crypto。在浏览器中, 我们使用 Web Crypto API。</p></li><li><p>PBKDF2, SHA256 被用于分发密钥, AES256-CBC 被用于加解密, 还使用 HMAC 来验证密文的来源, 并确保其未被篡改。</p></li><li><p>广泛地使用 Promise 来进行异步操作, 以此确保线程不被杜塞。</p></li><li><p>过时的浏览器将不能正常显示, 因此, 请升级浏览器。</p></li></ul><h3 id="1-安装hexo-blog-encrypt"><a href="#1-安装hexo-blog-encrypt" class="headerlink" title="1. 安装hexo-blog-encrypt"></a><strong>1. 安装hexo-blog-encrypt</strong></h3><div class="hljs"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save hexo-blog-encrypt</span></code></pre></div><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a><strong>2. 使用</strong></h3><h4 id="2-1-快速使用"><a href="#2-1-快速使用" class="headerlink" title="2.1 快速使用"></a><strong>2.1 快速使用</strong></h4><p>将 “password” 字段添加到文章头信息并设置值：</p><div class="hljs"><pre><code class="hljs subunit">title: 第一篇水贴author: 六六<span class="hljs-keyword">tags:</span>  - Hexo  - valinecategories:  - HEXOdate: 2019<span class="hljs-string">-07</span><span class="hljs-string">-27</span> 11:11:00password: 123456</code></pre></div><p>记得部署之前先clean  </p><h4 id="2-2-全局通过标签加密"><a href="#2-2-全局通过标签加密" class="headerlink" title="2.2 全局通过标签加密"></a><strong>2.2 全局通过标签加密</strong></h4><p>在_config中加入</p><div class="hljs"><pre><code class="hljs dust"><span class="xml">encrypt: # hexo-blog-encrypt  abstract: 有东西被加密了, 请输入密码查看.  message: 您好, 这里需要密码.  tags:  - </span><span class="hljs-template-variable">&#123;name: tagName, password: 密码A&#125;</span><span class="xml">  - </span><span class="hljs-template-variable">&#123;name: tagName, password: 密码B&#125;</span><span class="xml">  template: <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hexo-blog-encrypt"</span> <span class="hljs-attr">data-wpm</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">&#123;&#123;hbeWrongPassMessage&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;"</span> <span class="hljs-attr">data-whm</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">&#123;&#123;hbeWrongHashMessage&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hbe-input-container"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hbePass"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">&#123;&#123;hbeMessage&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;hbeMessage&#125;</span><span class="xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bottom-line"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hbeData"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hbeData"</span> <span class="hljs-attr">data-hmacdigest</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">&#123;&#123;hbeHmacDigest&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;"</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;hbeEncryptedData&#125;</span><span class="xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.  wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span></code></pre></div><p>通过tags对文章加密</p><h2 id="butterFly"><a href="#butterFly" class="headerlink" title="butterFly"></a>butterFly</h2><p>hexo果然省心了好多，只需简单配置几下便可，美滋滋！<br>搜了一下好看的主题，发现<a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">butterFly</a>不错，花里胡哨，就它了，嘻嘻开始配置~<br>额，发现自己沉醉于各种配置不能自拔。。。<br>最后还是换了主题。。。上传至gitee纪念一下我逝去的butterfly…</p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> valine </tag>
            
            <tag> 文章加密 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
